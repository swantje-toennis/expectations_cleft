# grey color palette
#cbPalette <- c("grey20","grey10","grey20","grey20","grey20")
# set alpha
alpha <- ifelse(means1$cond_q == "Q1", 1, 1)
# set size and font
size <- ifelse(means1$cond_q == "Q1", 6, 5)
font <- ifelse(means1$cond_q == "Q1", 2, 1)
levels(means1$cond_q)
# plot
ggplot(means1, aes(x=cond_c, y=Mean,color=cond_q,fill=cond_q)) +
#geom_point(stroke=.5,size=3,color="black") +
geom_text(aes(label=cond_q,alpha = alpha,fontface=font),size=size) +
theme(legend.position="none") +
scale_shape_manual(values=c(21)) +
#scale_fill_manual(values=c("#56B4E9","#E69F00"),labels=c("0","2"),name="Distance to PQ-raising sentence",guide = guide_legend(reverse = TRUE) ) +
#geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.15) +
#theme(legend.position = "top", legend.text=element_text(size=12)) +
labs(x='Context condition', y='Mean question expectedness') +
scale_y_continuous(limits = c(0,100),breaks = c(0,25,50,75,100),
labels= c("0","25","50","75","100")) +
scale_color_manual(values=cbPalette) +
scale_fill_manual(values=cbPalette)
ggsave("../graphs/main_results_norming.pdf",height=2.5,width=2.5)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
library(readxl)
library(readr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(ez)
library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
library(broom)
library(tidyselect)
library(tidyverse)
source("C:/Arbeit/R statistics/mer-utils.r")
source("C:/Arbeit/R statistics/regression-utils.r")
source("C:/Arbeit/R statistics/diagnostic_fcns.r")
source("C:/Arbeit/R statistics/boot_glmm.r")
source("C:/Arbeit/R statistics/helpers.r")
#### read preprocessed data ###########
data <- read.csv("../data/preprocessed_data/data.csv", sep = ";")
View(data)
#### Interpret expectedness judgment as numbers and context, question and list as a factors #####
data$expec<-as.numeric(data$expec)
data$cond_c<-as.factor(data$cond_c)
data$cond_q<-as.factor(data$cond_q)
data$list <- as.factor(data$list)
str(data)
View(data)
#### Interpret expectedness judgment as numbers and context, question and list as a factors #####
data$expec<-as.numeric(data$expec)
data$cond_c<-as.factor(data$cond_c)
data$cond_q<-as.factor(data$cond_q)
data$list <- as.factor(data$list)
str(data)
##### Take out all questions except pq1 ##########
data_pq1 <- subset(data, cond_q=="pq1")
str(data_pq1)
##### means and sd for pq1 ##########
data_pq1 %>% group_by(cond_c) %>%
summarize(M = mean(expec), SD = sd(expec))
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
library(readxl)
library(readr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(ez)
library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
library(broom)
library(tidyselect)
library(tidyverse)
########################################################
source("C:/Arbeit/R statistics/mer-utils.r")
source("C:/Arbeit/R statistics/regression-utils.r")
source("C:/Arbeit/R statistics/diagnostic_fcns.r")
source("C:/Arbeit/R statistics/boot_glmm.r")
source("C:/Arbeit/R statistics/helpers.r")
#### load preprocessed data ###########
data <- read.csv("../data/preprocessed_data/data.csv", sep = ";")
#### Interpret expectedness judgment as numbers and context, question and list as a factors #####
data$expec<-as.numeric(data$expec)
data$cond_c<-as.factor(data$cond_c)
data$cond_q<-as.factor(data$cond_q)
data$list <- as.factor(data$list)
str(data)
##### Take out all questions except pq1 ##########
data_pq1 <- subset(data, cond_q=="pq1")
str(data_pq1)
##### means and sd for pq1 ##########
data_pq1 %>% group_by(cond_c) %>%
summarize(M = mean(expec), SD = sd(expec))
# For get_pvalues: load remote package from GitHub server
install.packages("remotes")
remotes::install_github("dmirman/gazer")
library(gazer) #get pvalues
install.packages("remotes")
#### model 1 -- With varying intercepts and slopes for participant and item
# and list and context condition as fixed effects interaction
model1 <- lmer(expec ~ cond_c * list + (1 + cond_c|id) + (1 + cond_c|target_no), data = data_pq1)
#### model 2 -- With varying intercepts and slopes for participant and item
# and list and context condition as fixed effects (without interaction)
model2 <- lmer(expec ~ cond_c + list + (1 + cond_c|id) + (1 + cond_c|target_no), data = data_pq1)
anova(model1,model2) ## not significant -> Interaction of list out
#### model 3 -- With varying intercepts and slopes for participant and context item,
# context condition as fixed effect without list as fixed effect.
model3 <- lmer(expec ~ cond_c + (1 + cond_c|id) + (1 + cond_c|target_no), data = data_pq1)
anova(model2,model3) ## not significant -> list out
#### model 4 -- With varying intercepts and slopes for item and only varying intercepts for participant
model4 <- lmer(expec ~ cond_c + (1|id) + (1 + cond_c|target_no), data = data_pq1)
anova(model3,model4) ## significant! -> keep slope for participant
#### model 5 -- With varying intercepts and slopes for participant and only varying intercepts for item
model5 <- lmer(expec ~ cond_c + (1 + cond_c|id) + (1|target_no), data = data_pq1)
anova(model3,model5) ## not significant! -> slope for item out
#### model 6 -- With varying intercepts and slopes for participant (without item as random effect)
model6 <- lmer(expec ~ cond_c + (1 + cond_c|id), data = data_pq1) ## significant -> keep intercept for item
anova(model5,model6) ## significant -> keep intercept for item!
#### get the p-values for model2d ######
get_pvalues(model5) # significant difference between c1 and c3
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
library(readxl)
library(readr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(ez)
library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
library(tidyverse)
library(tidyselect)
### Dataset #######
#Raw data is saved as a separate file per list of participants
#Below they are joined:
#list 1
file1 <- "../data/raw_data/liste 1_results.csv"
liste1 <- read.csv(file1, sep = ";")
#rename columns
names(liste1) <- c("x1","id","x2","x3","x4","x5","x6","cond1","x7","x8","condA","x9","condB","x10","judgment","x12","x13","x14","x15","list" )
list1 <- c(1)
liste1$list <- list1
#list 2
file2 <- "../data/raw_data/liste 2_results.csv"
liste2 <- read.csv(file2, sep = ";")
#rename columns
names(liste2) <- c("x1","id","x2","x3","x4","x5","x6","cond1","x7","x8","condA","x9","condB","x10","judgment","x12","x13","x14","x15","list" )
list2 <- c(2)
liste2$list <- list2
#list 3
file3 <- "../data/raw_data/liste 3_results.csv"
liste3 <- read.csv(file3, sep = ";")
#rename columns
names(liste3) <- c("x1","id","x2","x3","x4","x5","x6","cond1","x7","x8","condA","x9","condB","x10","judgment","x12","x13","x14","x15","list" )
list3 <- c(3)
liste3$list <- list3
#list 4
file4 <- "../data/raw_data/liste 4_results.csv"
liste4 <- read.csv(file4, sep = ";")
#rename columns
names(liste4) <- c("x1","id","x2","x3","x4","x5","x6","cond1","x7","x8","condA","x9","condB","x10","judgment","x12","x13","x14","x15","list" )
list4 <- c(4)
liste4$list <- list4
#list 5
file5 <- "../data/raw_data/liste 5_results.csv"
liste5 <- read.csv(file5, sep = ";")
#rename columns
names(liste5) <- c("x1","id","x2","x3","x4","x5","x6","cond1","x7","x8","condA","x9","condB","x10","judgment","x12","x13","x14","x15","list" )
list5 <- c(5)
liste5$list <- list5
#liste 6
file6 <- "../data/raw_data/liste 6_results.csv"
liste6 <- read.csv(file6, sep = ";")
#rename columns
names(liste6) <- c("x1","id","x2","x3","x4","x5","x6","cond1","x7","x8","condA","x9","condB","x10","judgment","x12","x13","x14","x15","list" )
list6 <- c(6)
liste6$list <- list6
#list 7
file7 <- "../data/raw_data/liste 7_results.csv"
liste7 <- read.csv(file7, sep = ";")
#rename columns
names(liste7) <- c("x1","id","x2","x3","x4","x5","x6","cond1","x7","x8","condA","x9","condB","x10","judgment","x12","x13","x14","x15","list" )
list7 <- c(7)
liste7$list <- list7
#list 8
file8 <- "../data/raw_data/liste 8_results.csv"
liste8 <- read.csv(file8, sep = ";")
#rename columns
names(liste8) <- c("x1","id","x2","x3","x4","x5","x6","cond1","x7","x8","condA","x9","condB","x10","judgment","x12","x13","x14","x15","list" )
list8 <- c(8)
liste8$list <- list8
#Join all lists in one dataset
results_all <- rbind(liste1,liste2,liste3,liste4,liste5,liste6,liste7,liste8)
summary(results_all)
View(liste2)
View(liste3)
View(liste5)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source('helpers.R')
# load required packages
library(readxl)
library(readr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(ez)
library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
library(tidyverse)
library(tidyselect)
theme_set(theme_bw())
# load data
### Dataset #######
#The raw data contains a separate file for each list
#load data of list 1
list1 <- read.csv("../data/raw_data/liste 1_results.csv", sep = ";")
#list1 <- read.csv(file1, sep = ";")
#list1 <- c(1)
list1$list <- list1
#rename columns
names(list1) <- c("x1","id","x2","x3","x4","x5","x6","cond1","cond2","x7","cond_q","x8","expec","x9","q2","x10","exp2","x11","q3","x12","exp3","x13","q4","x14","exp4","x15","q5","x16","exp5","x17","x18", "list" )
#load data of list 2
list2 <- read.csv("../data/raw_data/liste 2_results.csv", sep = ";")
#list2 <- read.csv(file2, sep = ";")
#list2 <- c(2)
list2$list <- list2
#rename columns
names(list2) <- c("x1","id","x2","x3","x4","x5","x6","cond1","cond2","x7","cond_q","x8","expec","x9","q2","x10","exp2","x11","q3","x12","exp3","x13","q4","x14","exp4","x15","q5","x16","exp5","x17","x18", "list" )
#Join data from list 1 and 2
results_all <- rbind(list1,list2)
summary(results_all)
#delete unnecessary columns
results <- subset(results_all, select = c("id","cond1","cond2","cond_q","expec","q2","exp2","q3","exp3","q4","exp4","q5","exp5","list"))
#save anonymous participant data
personendaten<-results[(results$cond1=="feedback" | results$cond1=="<id:prolificID>"),]
write.table(personendaten, file="../data/preprocessed_data/participant_data.csv", row.names = FALSE, col.names = TRUE, sep = ";")
#delete unnecessary lines created by Onexp
res2a<-results[!(results$cond1=="submit" | results$cond1=="expectedness1" | results$cond1=="feedback" | results$cond1=="<id:prolificID>"),]
#delete column cond2
res2 <- subset(res2a, select = -c(cond2))
#delete item coding (which was only necessary for Onexp syntax)
res3 <- res2 %>%
mutate_at("cond1", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("cond_q", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q2", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q3", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q4", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q5", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("cond1", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("cond_q", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q2", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q3", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q4", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q5", str_replace, ">", "")
#separate cond1 into condition cond_c and target_no
res4 <- res3 %>% separate(cond1, c("cond_c", "target_no"), "-")
#This structures the data in a better way: create subsets of dataframe per question at position 1-5
res4_1 <- subset(res4, select = c(id, target_no, cond_c, cond_q, expec, list))
res4_2 <- subset(res4, select = c(id, target_no, cond_c, q2, exp2, list))
names(res4_2) <- c("id", "target_no", "cond_c", "cond_q", "expec","list")
res4_3 <- subset(res4, select = c(id, target_no, cond_c, q3, exp3, list))
names(res4_3) <- c("id", "target_no", "cond_c", "cond_q", "expec","list")
res4_4 <- subset(res4, select = c(id, target_no, cond_c, q4, exp4, list))
names(res4_4) <- c("id", "target_no", "cond_c", "cond_q", "expec","list")
res4_5 <- subset(res4, select = c(id, target_no, cond_c, q5, exp5, list))
names(res4_5) <- c("id", "target_no", "cond_c", "cond_q", "expec","list")
View(res4_1)
View(res3)
View(list1)
View(results_all)
View(results)
#Join data from list 1 and 2
results_all <- rbind(list1,list2)
summary(results_all)
#delete unnecessary columns
results <- subset(results_all, select = c("x1","id","cond1","cond2","cond_q","expec","q2","exp2","q3","exp3","q4","exp4","q5","exp5","list"))
personendaten<-results[(results$cond1=="feedback" | results$cond1=="<id:prolificID>"),]
write.table(personendaten, file="../data/preprocessed_data/participant_data.csv", row.names = FALSE, col.names = TRUE, sep = ";")
View(personendaten)
#This structures the data in a better way: create subsets of dataframe per question at position 1-5
res4_1 <- subset(res4, select = c(x1, id, target_no, cond_c, cond_q, expec, list))
res4_2 <- subset(res4, select = c(id, target_no, cond_c, q2, exp2, list))
names(res4_2) <- c("x1","id", "target_no", "cond_c", "cond_q", "expec","list")
res4_3 <- subset(res4, select = c(id, target_no, cond_c, q3, exp3, list))
names(res4_3) <- c("x1","id", "target_no", "cond_c", "cond_q", "expec","list")
res4_4 <- subset(res4, select = c(id, target_no, cond_c, q4, exp4, list))
names(res4_4) <- c("x1","id", "target_no", "cond_c", "cond_q", "expec","list")
res4_5 <- subset(res4, select = c(id, target_no, cond_c, q5, exp5, list))
names(res4_5) <- c("x1","id", "target_no", "cond_c", "cond_q", "expec","list")
#separate cond1 into condition cond_c and target_no
res4 <- res3 %>% separate(cond1, c("cond_c", "target_no"), "-")
#This structures the data in a better way: create subsets of dataframe per question at position 1-5
res4_1 <- subset(res4, select = c(x1, id, target_no, cond_c, cond_q, expec, list))
res4_2 <- subset(res4, select = c(x1, id, target_no, cond_c, q2, exp2, list))
names(res4_2) <- c("x1","id", "target_no", "cond_c", "cond_q", "expec","list")
res4_3 <- subset(res4, select = c(x1, id, target_no, cond_c, q3, exp3, list))
names(res4_3) <- c("x1","id", "target_no", "cond_c", "cond_q", "expec","list")
res4_4 <- subset(res4, select = c(x1, id, target_no, cond_c, q4, exp4, list))
names(res4_4) <- c("x1","id", "target_no", "cond_c", "cond_q", "expec","list")
res4_5 <- subset(res4, select = c(x1, id, target_no, cond_c, q5, exp5, list))
names(res4_5) <- c("x1","id", "target_no", "cond_c", "cond_q", "expec","list")
View(res4)
View(res3)
View(res2a)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source('helpers.R')
# load required packages
library(readxl)
library(readr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(ez)
library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
library(tidyverse)
library(tidyselect)
theme_set(theme_bw())
# load data
### Dataset #######
#The raw data contains a separate file for each list
#load data of list 1
list1 <- read.csv("../data/raw_data/liste 1_results.csv", sep = ";")
#list1 <- read.csv(file1, sep = ";")
#list1 <- c(1)
list1$list <- list1
#rename columns
names(list1) <- c("x1","id","x2","x3","x4","x5","x6","cond1","cond2","x7","cond_q","x8","expec","x9","q2","x10","exp2","x11","q3","x12","exp3","x13","q4","x14","exp4","x15","q5","x16","exp5","x17","x18", "list" )
#load data of list 2
list2 <- read.csv("../data/raw_data/liste 2_results.csv", sep = ";")
#list2 <- read.csv(file2, sep = ";")
#list2 <- c(2)
list2$list <- list2
#rename columns
names(list2) <- c("x1","id","x2","x3","x4","x5","x6","cond1","cond2","x7","cond_q","x8","expec","x9","q2","x10","exp2","x11","q3","x12","exp3","x13","q4","x14","exp4","x15","q5","x16","exp5","x17","x18", "list" )
#Join data from list 1 and 2
results_all <- rbind(list1,list2)
summary(results_all)
#delete unnecessary columns
results <- subset(results_all, select = c("x1","id","cond1","cond2","cond_q","expec","q2","exp2","q3","exp3","q4","exp4","q5","exp5","list"))
#save anonymous participant data
personendaten<-results[(results$cond1=="feedback" | results$cond1=="<id:prolificID>"),]
write.table(personendaten, file="../data/preprocessed_data/participant_data.csv", row.names = FALSE, col.names = TRUE, sep = ";")
View(results)
#delete unnecessary lines created by Onexp
res2a<-results[!(results$cond1=="submit" | results$cond1=="expectedness1" | results$cond1=="feedback" | results$cond1=="<id:prolificID>"),]
View(res2a)
#delete column cond2
res2 <- subset(res2a, select = -c(cond2))
View(res2)
#delete item coding (which was only necessary for Onexp syntax)
res3 <- res2 %>%
mutate_at("cond1", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("cond_q", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q2", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q3", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q4", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q5", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("cond1", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("cond_q", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q2", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q3", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q4", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q5", str_replace, ">", "")
View(res3)
#separate cond1 into condition cond_c and target_no
res4 <- res3 %>% separate(cond1, c("cond_c", "target_no"), "-")
res4_1 <- subset(res4, select = c(x1, id, target_no, cond_c, cond_q, expec, list))
res4_2 <- subset(res4, select = c(x1, id, target_no, cond_c, q2, exp2, list))
names(res4_2) <- c("x1", "id", "target_no", "cond_c", "cond_q", "expec","list")
res4_3 <- subset(res4, select = c(x1, id, target_no, cond_c, q3, exp3, list))
names(res4_3) <- c("x1", "id", "target_no", "cond_c", "cond_q", "expec","list")
res4_4 <- subset(res4, select = c(x1, id, target_no, cond_c, q4, exp4, list))
names(res4_4) <- c("x1", "id", "target_no", "cond_c", "cond_q", "expec","list")
res4_5 <- subset(res4, select = c(x1, id, target_no, cond_c, q5, exp5, list))
names(res4_5) <- c("x1", "id", "target_no", "cond_c", "cond_q", "expec","list")
View(res4_2)
#join all subsets to receive a big dataframe in the correct format
res5 <- rbind(res4_1,res4_2,res4_3,res4_4,res4_5)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source('helpers.R')
# load required packages
library(readxl)
library(readr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(ez)
library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
library(tidyverse)
library(tidyselect)
theme_set(theme_bw())
# load data
### Dataset #######
#The raw data contains a separate file for each list
#load data of list 1
list1 <- read.csv("../data/raw_data/liste 1_results.csv", sep = ";")
#list1 <- read.csv(file1, sep = ";")
#list1 <- c(1)
list1$list <- list1
#rename columns
names(list1) <- c("x1","id","x2","x3","x4","x5","x6","cond1","cond2","x7","cond_q","x8","expec","x9","q2","x10","exp2","x11","q3","x12","exp3","x13","q4","x14","exp4","x15","q5","x16","exp5","x17","x18", "list" )
#load data of list 2
list2 <- read.csv("../data/raw_data/liste 2_results.csv", sep = ";")
#list2 <- read.csv(file2, sep = ";")
#list2 <- c(2)
list2$list <- list2
#rename columns
names(list2) <- c("x1","id","x2","x3","x4","x5","x6","cond1","cond2","x7","cond_q","x8","expec","x9","q2","x10","exp2","x11","q3","x12","exp3","x13","q4","x14","exp4","x15","q5","x16","exp5","x17","x18", "list" )
#Join data from list 1 and 2
results_all <- rbind(list1,list2)
summary(results_all)
#delete unnecessary columns
results <- subset(results_all, select = c("id","cond1","cond2","cond_q","expec","q2","exp2","q3","exp3","q4","exp4","q5","exp5","list"))
#save anonymous participant data
personendaten<-results[(results$cond1=="feedback" | results$cond1=="<id:prolificID>"),]
write.table(personendaten, file="../data/preprocessed_data/participant_data.csv", row.names = FALSE, col.names = TRUE, sep = ";")
