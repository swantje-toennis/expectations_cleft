library(betareg)
library(broom)
library(car)
library(plyr)
library(dplyr)
library(emmeans)
library(ez)
library(fitdistrplus)
library(gplots)
library(ggplot2)
library(ggpubr)
library(languageR)
library(lme4)
library(lmtest)
library(logspline)
library(MASS)
library(multcompView)
library(nlme)
library(ordinal)
library(psy811)
library(psych)
library(rcompanion)
library(readr)
library(readxl)
library(rstatix)
library(stringr)
library(tidyr)
library(tidyselect)
library(tidyverse)
library(readxl)
library(readr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(ez)
library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
library(broom)
library(tidyselect)
library(tidyverse)
library(psy811)
#library(betareg)
#library(emmeans)
#library(lmtest)
#library(multcompView)
#library(psych)
#library(rcompanion)
#library(rstatix)
########################################################
setwd("C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data")
source("C:/Arbeit/R statistics/mer-utils.r")
source("C:/Arbeit/R statistics/regression-utils.r")
source("C:/Arbeit/R statistics/diagnostic_fcns.r")
source("C:/Arbeit/R statistics/boot_glmm.r")
source("C:/Arbeit/R statistics/helpers.r")
data <- read.csv("C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data/data.csv", sep = ";")
#### Interpret expectedness judgment as numbers and condition as a factor #####
data$expec<-as.numeric(data$expec)
data$cond_c<-as.factor(data$cond_c)
data$cond_q<-as.factor(data$cond_q)
str(data)
#### normalize data ###############
zdata1 <- data %>% group_by(id,target_no,cond_c)%>%
summarize(id, target_no, cond_c, norm_exp = 100*expec/sum(expec), expec, cond_q, list)
normalized_data <- zdata1 %>%
mutate_at("norm_exp", str_replace, "NaN", "0")
normalized_data$norm_exp <- as.numeric(normalized_data$norm_exp)
str(normalized_data)
normalized_data_pq1 <- subset(normalized_data, cond_q=="pq1")
normalized_data_pq1$norm_exp<-as.numeric(normalized_data_pq1$norm_exp)
model2 <- lmer(norm_exp ~ cond_c + (1 + cond_c|id) + (1 + cond_c|target_no), data = normalized_data_pq1)
summary(model2)
#### model 2 -- With varying intercepts and slopes
model2 <- lmer(norm_exp ~ cond_c + (cond_c|id) + (cond_c|target_no), data = normalized_data_pq1)
#### model 1 -- Without random effects
model1 <- lm(norm_exp ~ cond_c, data = normalized_data_pq1)
summary(model1)
#### model 2 -- With varying intercepts and slopes
model2 <- lmer(norm_exp ~ cond_c + (1|id:target_no), data = normalized_data_pq1)
#### model 2 -- With varying intercepts and slopes
model2 <- lmer(norm_exp ~ cond_c + (1|target_no:cond_c), data = normalized_data_pq1)
summary(model2)
#### model 2 -- With varying intercepts and slopes
model2 <- lmer(norm_exp ~ cond_c + (1 + cond_c|id) + (1 + cond_c|target_no), data = normalized_data_pq1)
summary(model2)
extract_random_effects(model2)
library(mixedup)
remotes::install_github('m-clark/mixedup')
library(mixedup)
extract_random_effects(model2)
model4 <- lmer(norm_exp ~ cond_c + (1|id) + (1|target_no), data = normalized_data_pq1)
summary(model4)
extract_random_effects(model4)
