library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
########################################################
setwd("C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data")
data <- read.csv("C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data/data.csv", sep = ";")
#### Why this? - To make sure the entries are interpreted as numbers? #####
data$exp<-as.numeric(data$exp)
data$cond_c<-as.factor(data$cond_c)
str(data)
dtb <- ddply(data, .(id, cond_c, cond_q), summarise,
judge.mean=mean(exp))
summary(dtb)
View(dtb)
str(data)
##### Take out all conditions except pq1 ##########
data_pq1 <- subset(data, cond_q=="pq1")
View(data_pq1)
tapply(data_pq1$exp, data_pq1$cond_c, mean)
contrasts(data_pq1$cond_c) = contr.treatment(2)
contr.treatment(2)
summary(lm(exp ~ cond_c, data_pq1))
summary_pq1 %>% group_by(cond_c) %>%
summarize(M = mean(exp), SD = sd(exp))
data_pq1 %>% group_by(cond_c) %>%
summarize(M = mean(exp), SD = sd(exp))
##### show the mean for the two conditions ##########
tapply(data_pq1$exp, data_pq1$cond_c, mean)
data_pq1 %>% ggplot(aes(x = Context, y = Expectedness, fill = Context)) +
geom_boxplot() + theme_minimal() +
scale_fill_brewer(palette = 'PuOr')
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cont_c)) +
geom_boxplot() + theme_minimal() +
scale_fill_brewer(palette = 'PuOr')
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() +
scale_fill_brewer(palette = 'PuOr')
##### plot means and sd ############
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Context") +
scale_fill_brewer(palette = 'PuOr')
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c(title="Context"))) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Context") + scale_x_discrete("Expectedness") +
scale_fill_brewer(palette = 'PuOr')
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Context") + scale_x_discrete("Expectedness") + scale_fill_discrete(name="Context") +
scale_fill_brewer(palette = 'PuOr')
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Context") + scale_x_discrete("Expectedness") + scale_fill_discrete(name="Context") +
scale_fill_brewer(palette = 'PuOr')
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Context") + scale_y_discrete("Expectedness") + scale_fill_discrete(name="Context") +
scale_fill_brewer(palette = 'PuOr')
##### plot means and sd ############
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Context") + scale_y_discrete("Expectedness") + scale_fill_discrete(name="Context") +
scale_fill_brewer(palette = 'PuOr')
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Context") + scale_y_discrete("Expectedness") + scale_fill_discrete("Context") +
scale_fill_brewer(palette = 'PuOr')
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Context") + scale_y_discrete("Expectedness") +
scale_fill_brewer(palette = 'PuOr')
##### plot means and sd ############
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Context") + scale_y_discrete("Expectedness") + guides(fill = FALSE) +
scale_fill_brewer(palette = 'PuOr')
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Context") + scale_y_discrete("Expectedness") + guides(fill = guide_legend(title = NULL)) +
scale_fill_brewer(palette = 'PuOr')
##### plot means and sd ############
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Context") + scale_y_discrete("Expectedness") + guides(fill = guide_legend(title = "Context")) +
scale_fill_brewer(palette = 'PuOr')
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Number of context sentneces") + scale_y_discrete("Expectedness") + guides(fill = guide_legend(title = "Context")) +
scale_fill_brewer(palette = 'PuOr')
library(readxl)
library(readr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(ez)
library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
library(tidyverse)
library(tidyselect)
########################################################
setwd("C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/raw_data")
### Dataset #######   ---- ADJUST PATH!!!!----------
#liste 1
file1 <- "C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/raw_data/liste 1_results.csv"
liste1 <- read.csv(file1, sep = ";")
list1 <- c(1)
liste1$list <- list1
### Dataset #######   ---- ADJUST PATH!!!!----------
#liste 1
file1 <- "C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/raw_data/liste 1_results.csv"
liste1 <- read.csv(file1, sep = ";")
### Dataset #######   ---- ADJUST PATH!!!!----------
#liste 1
file1 <- "C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/raw_data/liste 1_results.csv"
liste1 <- read.csv(file1, sep = ";")
list1 <- c(1)
liste1$list <- list1
#spalten umbenennen
names(liste1) <- c("x1","id","x2","x3","x4","x5","x6","cond1","cond2","x7","cond_q","x8","exp","x9","q2","x10","exp2","x11","q3","x12","exp3","x13","q4","x14","exp4","x15","q5","x16","exp5","x17","x18", "list" )
#liste 2
file2 <- "C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/raw_data/liste 2_results.csv"
liste2 <- read.csv(file2, sep = ";")
list2 <- c(2)
liste2$list <- list2
#liste 2
file2 <- "C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/raw_data/liste 2_results.csv"
liste2 <- read.csv(file2, sep = ";")
list2 <- c(2)
liste2$list <- list2
#spalten umbenennen
names(liste2) <- c("x1","id","x2","x3","x4","x5","x6","cond1","cond2","x7","cond_q","x8","exp","x9","q2","x10","exp2","x11","q3","x12","exp3","x13","q4","x14","exp4","x15","q5","x16","exp5","x17","x18", "list" )
results_all <- rbind(liste1,liste2)
summary(results_all)
#unnötige Spalten raus
results <- subset(results_all, select = c("id","cond1","cond2","cond_q","exp","q2","exp2","q3","exp3","q4","exp4","q5","exp5","list"))
#Personendaten abspeichern (Wie speichert man das?)
personendaten<-results[(results$cond1=="feedback" | results$cond1=="<id:prolificID>"),]
write.table(personendaten, file="C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data/personendaten.csv", row.names = FALSE, col.names = TRUE, sep = ";")
#Unnötige Zeilen von Onexp rauswerfen
res2a<-results[!(results$cond1=="submit" | results$cond1=="expectedness1" | results$cond1=="feedback" | results$cond1=="<id:prolificID>"),]
#column cond2 rauswerfen, weil unnötig
res2 <- subset(res2a, select = -c(cond2))
#unnötige Zeichen raus
res3 <- res2 %>%
mutate_at("cond1", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("cond_q", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q2", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q3", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q4", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q5", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("cond1", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("cond_q", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q2", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q3", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q4", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q5", str_replace, ">", "")
#cond1 aufteilen in context condition cond_c und target_no
res4 <- res3 %>% separate(cond1, c("cond_c", "target_no"), "-")
#create subsets of dataframe per question at position 1-5
res4_1 <- subset(res4, select = c(id, target_no, cond_c, cond_q, exp, list))
res4_2 <- subset(res4, select = c(id, target_no, cond_c, q2, exp2, list))
names(res4_2) <- c("id", "target_no", "cond_c", "cond_q", "exp","list")
res4_3 <- subset(res4, select = c(id, target_no, cond_c, q3, exp3, list))
names(res4_3) <- c("id", "target_no", "cond_c", "cond_q", "exp","list")
res4_4 <- subset(res4, select = c(id, target_no, cond_c, q4, exp4, list))
names(res4_4) <- c("id", "target_no", "cond_c", "cond_q", "exp","list")
res4_5 <- subset(res4, select = c(id, target_no, cond_c, q5, exp5, list))
names(res4_5) <- c("id", "target_no", "cond_c", "cond_q", "exp","list")
#join all subsets to receive a big dataframe in the correct format
res5 <- rbind(res4_1,res4_2,res4_3,res4_4,res4_5)
#Filler rauswerfen
data1 <-res5[!(res5$cond_c=="f10" | res5$cond_c=="f11" | res5$cond_c=="f12" | res5$cond_c=="f13" | res5$cond_c=="f14" | res5$cond_c=="f1" | res5$cond_c=="f2" | res5$cond_c=="f3" | res5$cond_c=="f4" | res5$cond_c=="f5" | res5$cond_c=="f6" | res5$cond_c=="f7" | res5$cond_c=="f8" | res5$cond_c=="f9"),]
fillers <-res5[(res5$cond_c=="f10" | res5$cond_c=="f11" | res5$cond_c=="f12" | res5$cond_c=="f13" | res5$cond_c=="f14" | res5$cond_c=="f1" | res5$cond_c=="f2" | res5$cond_c=="f3" | res5$cond_c=="f4" | res5$cond_c=="f5" | res5$cond_c=="f6" | res5$cond_c=="f7" | res5$cond_c=="f8" | res5$cond_c=="f9"),]
#Fillers abspeichern
write.table(fillers, file="C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data/fillers.csv", row.names = FALSE, col.names = TRUE, sep = ";")
#### Why this? - To make sure the entries are interpreted as numbers? #####
data1$exp<-as.numeric(data1$exp)
###### Calculate means and standard deviation for irrelevant and relevant Q
mean.irr <- mean(data1$exp[data1$cond_q=="irr"])
sd.irr <- sd(data1$exp[data1$cond_q=="irr"])
mean.then <- mean(data1$exp[data1$cond_q=="then"])
sd.then <- sd(data1$exp[data1$cond_q=="then"])
#exclude participants whose mean rating is 2 sd below general mean for then_Q
#and whose mean rating is 2 sd above the general mean for irr_Q
#participants who always choose the middle are not excluded. Should they?
#1. helpful subsets
data2 <- ddply(data1, .(id, cond_q), summarise, judge.mean=mean(exp))
data3 <- subset(data2, (cond_q=="irr"))
data4 <- subset(data2, (cond_q=="then"))
#2. creating the subset of excluded participants
excludedperson <- rbind(subset(data3, (judge.mean > (mean.irr+2*sd.irr))),subset(data4, (judge.mean < (mean.then-2*sd.then))))
`%notin%` <- Negate(`%in%`)
data <- subset(data1, id %notin% excludedperson$id)
#Save preprocessed data (this will be input for analysis)
write.table(data, file="C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data/data.csv", row.names = FALSE, col.names = TRUE, sep = ";")
#liste 2
file2 <- "C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/raw_data/liste 2_results.csv"
liste2 <- read.csv(file2, sep = ";")
list2 <- c(2)
liste2$list <- list2
#spalten umbenennen
names(liste2) <- c("x1","id","x2","x3","x4","x5","x6","cond1","cond2","x7","cond_q","x8","exp","x9","q2","x10","exp2","x11","q3","x12","exp3","x13","q4","x14","exp4","x15","q5","x16","exp5","x17","x18", "list" )
results_all <- rbind(liste1,liste2)
summary(results_all)
#unnötige Spalten raus
results <- subset(results_all, select = c("id","cond1","cond2","cond_q","exp","q2","exp2","q3","exp3","q4","exp4","q5","exp5","list"))
#Personendaten abspeichern (Wie speichert man das?)
personendaten<-results[(results$cond1=="feedback" | results$cond1=="<id:prolificID>"),]
write.table(personendaten, file="C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data/personendaten.csv", row.names = FALSE, col.names = TRUE, sep = ";")
#Unnötige Zeilen von Onexp rauswerfen
res2a<-results[!(results$cond1=="submit" | results$cond1=="expectedness1" | results$cond1=="feedback" | results$cond1=="<id:prolificID>"),]
#column cond2 rauswerfen, weil unnötig
res2 <- subset(res2a, select = -c(cond2))
#unnötige Zeichen raus
res3 <- res2 %>%
mutate_at("cond1", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("cond_q", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q2", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q3", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q4", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("q5", str_replace, "<id:", "")
res3 <- res3 %>%
mutate_at("cond1", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("cond_q", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q2", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q3", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q4", str_replace, ">", "")
res3 <- res3 %>%
mutate_at("q5", str_replace, ">", "")
#cond1 aufteilen in context condition cond_c und target_no
res4 <- res3 %>% separate(cond1, c("cond_c", "target_no"), "-")
#create subsets of dataframe per question at position 1-5
res4_1 <- subset(res4, select = c(id, target_no, cond_c, cond_q, exp, list))
res4_2 <- subset(res4, select = c(id, target_no, cond_c, q2, exp2, list))
names(res4_2) <- c("id", "target_no", "cond_c", "cond_q", "exp","list")
res4_3 <- subset(res4, select = c(id, target_no, cond_c, q3, exp3, list))
names(res4_3) <- c("id", "target_no", "cond_c", "cond_q", "exp","list")
res4_4 <- subset(res4, select = c(id, target_no, cond_c, q4, exp4, list))
names(res4_4) <- c("id", "target_no", "cond_c", "cond_q", "exp","list")
res4_5 <- subset(res4, select = c(id, target_no, cond_c, q5, exp5, list))
names(res4_5) <- c("id", "target_no", "cond_c", "cond_q", "exp","list")
#join all subsets to receive a big dataframe in the correct format
res5 <- rbind(res4_1,res4_2,res4_3,res4_4,res4_5)
#Filler rauswerfen
data1 <-res5[!(res5$cond_c=="f10" | res5$cond_c=="f11" | res5$cond_c=="f12" | res5$cond_c=="f13" | res5$cond_c=="f14" | res5$cond_c=="f1" | res5$cond_c=="f2" | res5$cond_c=="f3" | res5$cond_c=="f4" | res5$cond_c=="f5" | res5$cond_c=="f6" | res5$cond_c=="f7" | res5$cond_c=="f8" | res5$cond_c=="f9"),]
fillers <-res5[(res5$cond_c=="f10" | res5$cond_c=="f11" | res5$cond_c=="f12" | res5$cond_c=="f13" | res5$cond_c=="f14" | res5$cond_c=="f1" | res5$cond_c=="f2" | res5$cond_c=="f3" | res5$cond_c=="f4" | res5$cond_c=="f5" | res5$cond_c=="f6" | res5$cond_c=="f7" | res5$cond_c=="f8" | res5$cond_c=="f9"),]
#Fillers abspeichern
write.table(fillers, file="C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data/fillers.csv", row.names = FALSE, col.names = TRUE, sep = ";")
#### Why this? - To make sure the entries are interpreted as numbers? #####
data1$exp<-as.numeric(data1$exp)
###### Calculate means and standard deviation for irrelevant and relevant Q
mean.irr <- mean(data1$exp[data1$cond_q=="irr"])
sd.irr <- sd(data1$exp[data1$cond_q=="irr"])
mean.then <- mean(data1$exp[data1$cond_q=="then"])
sd.then <- sd(data1$exp[data1$cond_q=="then"])
#exclude participants whose mean rating is 2 sd below general mean for then_Q
#and whose mean rating is 2 sd above the general mean for irr_Q
#participants who always choose the middle are not excluded. Should they?
#1. helpful subsets
data2 <- ddply(data1, .(id, cond_q), summarise, judge.mean=mean(exp))
data3 <- subset(data2, (cond_q=="irr"))
data4 <- subset(data2, (cond_q=="then"))
#2. creating the subset of excluded participants
excludedperson <- rbind(subset(data3, (judge.mean > (mean.irr+2*sd.irr))),subset(data4, (judge.mean < (mean.then-2*sd.then))))
`%notin%` <- Negate(`%in%`)
data <- subset(data1, id %notin% excludedperson$id)
#Save preprocessed data (this will be input for analysis)
write.table(data, file="C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data/data.csv", row.names = FALSE, col.names = TRUE, sep = ";")
library(readxl)
library(readr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(ez)
library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
setwd("C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data")
data <- read.csv("C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data/data.csv", sep = ";")
data$exp<-as.numeric(data$exp)
data$cond_c<-as.factor(data$cond_c)
str(data)
View(excludedperson)
View(data1)
View(data1)
##### Take out all questions except pq1 ##########
data_pq1 <- subset(data, cond_q=="pq1")
View(data_pq1)
data_pq1 %>% group_by(cond_c) %>%
summarize(M = mean(exp), SD = sd(exp))
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Number of context sentneces") + scale_y_discrete("Expectedness") + guides(fill = guide_legend(title = "Context")) +
scale_fill_brewer(palette = 'PuOr')
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Number of context sentences")  + guides(fill = guide_legend(title = "Context")) +
scale_fill_brewer(palette = 'PuOr')
##### plot means and sd ############
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + scale_x_discrete("Number of context sentences") + ylab("Expectedness") + guides(fill = guide_legend(title = "Context")) +
scale_fill_brewer(palette = 'PuOr')
##### plot means and sd ############
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + xlab("Number of context sentences") + ylab("Expectedness") + guides(fill = guide_legend(title = "Context")) +
scale_fill_brewer(palette = 'PuOr')
####
pq1_model <- lm(exp ~ cond_c, data = data_pq1)
View(pq1_model)
tidy(pq1_model) %>% select(term, estimate)
View(pq1_model)
tidy(pq1_model) %>% select(term, estimate)
library(broom)
tidy(pq1_model) %>% select(term, estimate)
####
pq1_model <- lm(exp ~ cond_c, data = data_pq1)
tidy(pq1_model) %>% select(term, estimate)
head(fitted(pq1_model))
summary(lmer(exp ~ cond_c, data_pq1))
?lmer
model2 <- lmer(exp ~ cond_c + (1|id) + (1|target_no), data = pq1_data)
model2 <- lmer(exp ~ cond_c + (1|id) + (1|target_no), data = data_pq1)
View(model2)
View(model2)
View(model2)
model2 <- lmer(exp ~ cond_c + (1|id) + (1|target_no), data = data_pq1)
View(model2)
View(pq1_model)
tidy(pq1_model) %>% select(terms, estimates)
####
pq1_model <- lm(exp ~ cond_c, data = data_pq1)
library(readxl)
library(readr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(ez)
library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
library(broom)
########################################################
setwd("C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data")
data <- read.csv("C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data/data.csv", sep = ";")
#### Why this? - To make sure the entries are interpreted as numbers? #####
data$exp<-as.numeric(data$exp)
##### Take out all questions except pq1 ##########
data_pq1 <- subset(data, cond_q=="pq1")
data_pq1 %>% group_by(cond_c) %>%
summarize(M = mean(exp), SD = sd(exp))
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + xlab("Number of context sentences") + ylab("Expectedness") + guides(fill = guide_legend(title = "Context")) +
scale_fill_brewer(palette = 'PuOr')
pq1_model <- lm(exp ~ cond_c, data = data_pq1)
tidy(pq1_model) %>% select(term, estimate)
library(tidyverse)
library(tidyselect)
####
pq1_model <- lm(exp ~ cond_c, data = data_pq1)
tidy(pq1_model) %>% select(term, estimate)
model2 <- lmer(exp ~ cond_c + (1|id) + (1|target_no), data = data_pq1)
View(model2)
library(readxl)
library(readr)
library(ggplot2)
library(ggpubr)
library(plyr)
library(dplyr)
library(ez)
library(lme4)
library(languageR)
library(car)
library(MASS)
library(fitdistrplus)
library(ordinal)
library(nlme)
library(logspline)
library(gplots)
library(stringr)
library(tidyr)
setwd("C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/graphs")
data <- read.csv("C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/preprocessed_data/data.csv", sep = ";")
#### Why this? - To make sure the entries are interpreted as numbers? #####
data$exp<-as.numeric(data$exp)
##aggregieren: Mittelwert in exp pro Teilnehmer pro combination aus Kontext und Frage
#Der Mittelwert sollte hier immer nur 2 Werte mitteln. Ist das sinnlos?
dtb <- ddply(data, .(id, cond_c, cond_q), summarise,
judge.mean=mean(exp))
summary(dtb)
dtb
#create subsets of database
#1. only pq1
dtb_pq1 <- subset(dtb, cond_q=="pq1")
dtb_pq1
#2. only pq2
dtb_pq2 <- subset(dtb, cond_q=="pq2")
dtb_pq2
#3. only pq3
dtb_pq3 <- subset(dtb, cond_q=="pq3")
dtb_pq3
#4. only then
dtb_then <- subset(dtb, cond_q=="then")
dtb_then
#5. only irr
dtb_irr <- subset(dtb, cond_q=="irr")
dtb_irr
#6. only c1
dtb_c1 <- subset(dtb, cond_c=="c1")
#8. only c3
dtb_c3 <- subset(dtb, cond_c=="c3")
#plot means
#pq1
plotmeans(dtb_pq1$judge.mean~ dtb_pq1$cond_c, xlab="Context",
ylab="Mean Judgment", main="Mean Plot for PQ1 with 95% CI")
#pq2
plotmeans(dtb_pq2$judge.mean~ interaction(dtb_pq2$cond_c, sep ="   "),xlab="Context",
ylab="Mean Judgment", main="Mean Plot for PQ2 with 95% CI")
#plot means
#pq1
plotmeans(dtb_pq1$judge.mean~ dtb_pq1$cond_c, xlab="Context",
ylab="Mean Judgment", main="Mean Plot for PQ1 with 95% CI")
#pq3
plotmeans(dtb_pq3$judge.mean~ interaction(dtb_pq3$cond_c, sep ="   "),xlab="Context",
ylab="Mean Judgment", main="Mean Plot for PQ3 with 95% CI")
#then
plotmeans(dtb_then$judge.mean~ interaction(dtb_then$cond_c, sep ="   "),xlab="Context",
ylab="Mean Judgment", main="Mean Plot for 'then' Q with 95% CI")
#irr
plotmeans(dtb_irr$judge.mean~ interaction(dtb_irr$cond_c, sep ="   "),xlab="Context",
ylab="Mean Judgment", main="Mean Plot for irrelevant Q with 95% CI")
#then
plotmeans(dtb_then$judge.mean~ interaction(dtb_then$cond_c, sep ="   "),xlab="Context",
ylab="Mean Judgment", main="Mean Plot for 'then' Q with 95% CI")
#c1
plotmeans(dtb_c1$judge.mean~ interaction(dtb_c1$cond_q, sep ="   "),xlab="Questions",
ylab="Mean Judgment", main="Mean Plot for c1 with 95% CI")
#c3
plotmeans(dtb_c3$judge.mean~ interaction(dtb_c3$cond_q, sep ="   "),xlab="Questions",
ylab="Mean Judgment", main="Mean Plot for c3 with 95% CI")
plotmeans(data$exp~ data$cond_c, xlab="Context",
ylab="Mean Judgment", main="Mean Plot with 95% CI")
plotmeans(data$exp ~ data$cond_c + data$cond_q, xlab="Context",
ylab="Mean Judgment", main="Mean Plot with 95% CI")
plotmeans(data$exp ~ data$cond_c ~ data$cond_q, xlab="Context",
ylab="Mean Judgment", main="Mean Plot with 95% CI")
plotmeans(data$exp ~ data$cond_c + (1|data$cond_q), xlab="Context",
ylab="Mean Judgment", main="Mean Plot with 95% CI")
plotmeans(data$exp ~ data$cond_c + (data$cond_q), xlab="Context",
ylab="Mean Judgment", main="Mean Plot with 95% CI")
plotmeans(data$exp ~ data$cond_c + data$cond_q, xlab="Context",
ylab="Mean Judgment", main="Mean Plot with 95% CI")
plotmeans(exp ~ cond_c + (1|cond_q), xlab="Context", data = data,
ylab="Mean Judgment", main="Mean Plot with 95% CI")
plotmeans(exp ~ cond_c, xlab="Context", data = data,
ylab="Mean Judgment", main="Mean Plot with 95% CI")
?lmer
model2 <- lmer(exp ~ cond_c + (1|id) + (1|target_no), data = data_pq1)
model2 <- lmer(exp ~ cond_c + (1|id) + (1|target_no), data = data_pq1)
####
pq1_model <- lm(exp ~ cond_c, data = data_pq1)
##### plot means and sd ############
data_pq1 %>% ggplot(aes(x = cond_c, y = exp, fill = cond_c)) +
geom_boxplot() + theme_minimal() + xlab("Number of context sentences") + ylab("Expectedness") + guides(fill = guide_legend(title = "Context")) +
scale_fill_brewer(palette = 'PuOr')
file2 <- "C:/Arbeit/Expectedness/experiments/pretest/pilot2/results/raw_data/liste 2_results.csv"
?lmer
?dummy{lme4}
?dummy
?lmer
?dummy
